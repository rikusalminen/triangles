#version 420
#extension GL_ARB_explicit_uniform_location : enable
#extension GL_ARB_enhanced_layouts : enable

out vec4 color;

const uint font[256] = {
    0x00000000, 0x00000000,
    0x7e81a581, 0xbd99817e,
    0x7effdbff, 0xc3e7ff7e,
    0x6cfefefe, 0x7c381000,
    0x10387cfe, 0x7c381000,
    0x387c38fe, 0xfed61038,
    0x1010387c, 0xfe7c1038,
    0x0000183c, 0x3c180000,
    0xffffe7c3, 0xc3e7ffff,
    0x003c6642, 0x42663c00,
    0xffc399bd, 0xbd99c3ff,
    0x0f070f7d, 0xcccccc78,
    0x3c666666, 0x3c187e18,
    0x3f333f30, 0x3070f0e0,
    0x7f637f63, 0x6367e6c0,
    0x995a3ce7, 0xe73c5a99,
    0x80e0f8fe, 0xf8e08000,
    0x020e3efe, 0x3e0e0200,
    0x183c7e18, 0x187e3c18,
    0x66666666, 0x66006600,
    0x7fdbdb7b, 0x1b1b1b00,
    0x7ec378cc, 0xcc788cf8,
    0x00000000, 0x7e7e7e00,
    0x183c7e18, 0x7e3c18ff,
    0x183c7e18, 0x18181800,
    0x18181818, 0x7e3c1800,
    0x00180cfe, 0x0c180000,
    0x003060fe, 0x60300000,
    0x0000c0c0, 0xc0fe0000,
    0x002466ff, 0x66240000,
    0x00183c7e, 0xffff0000,
    0x00ffff7e, 0x3c180000,
    0x00000000, 0x00000000,
    0x30787830, 0x30003000,
    0x6c6c6c00, 0x00000000,
    0x6c6cfe6c, 0xfe6c6c00,
    0x307cc078, 0x0cf83000,
    0x00c6cc18, 0x3066c600,
    0x386c3876, 0xdccc7600,
    0x6060c000, 0x00000000,
    0x18306060, 0x60301800,
    0x60301818, 0x18306000,
    0x00663cff, 0x3c660000,
    0x003030fc, 0x30300000,
    0x00000000, 0x00703060,
    0x000000fc, 0x00000000,
    0x00000000, 0x00303000,
    0x060c1830, 0x60c08000,
    0x78ccdcfc, 0xeccc7800,
    0x30f03030, 0x3030fc00,
    0x78cc0c38, 0x60ccfc00,
    0x78cc0c38, 0x0ccc7800,
    0x1c3c6ccc, 0xfe0c0c00,
    0xfcc0f80c, 0x0ccc7800,
    0x3860c0f8, 0xcccc7800,
    0xfccc0c18, 0x30606000,
    0x78cccc78, 0xcccc7800,
    0x78cccc7c, 0x0c187000,
    0x00003030, 0x00303000,
    0x00003030, 0x00703060,
    0x183060c0, 0x60301800,
    0x0000fc00, 0xfc000000,
    0x6030180c, 0x18306000,
    0x78cc0c18, 0x30003000,
    0x7cc6dede, 0xdec07800,
    0x3078cccc, 0xfccccc00,
    0xfc66667c, 0x6666fc00,
    0x3c66c0c0, 0xc0663c00,
    0xfc6c6666, 0x666cfc00,
    0xfe626878, 0x6862fe00,
    0xfe626878, 0x6860f000,
    0x3c66c0c0, 0xce663e00,
    0xccccccfc, 0xcccccc00,
    0x78303030, 0x30307800,
    0x1e0c0c0c, 0xcccc7800,
    0xe6666c78, 0x6c66e600,
    0xf0606060, 0x6266fe00,
    0xc6eefed6, 0xc6c6c600,
    0xc6e6f6de, 0xcec6c600,
    0x386cc6c6, 0xc66c3800,
    0xfc66667c, 0x6060f000,
    0x78cccccc, 0xdc781c00,
    0xfc66667c, 0x786ce600,
    0x78cce038, 0x1ccc7800,
    0xfcb43030, 0x30307800,
    0xcccccccc, 0xccccfc00,
    0xcccccccc, 0xcc783000,
    0xc6c6c6d6, 0xfeeec600,
    0xc6c66c38, 0x6cc6c600,
    0xcccccc78, 0x30307800,
    0xfecc9830, 0x62c6fe00,
    0x78606060, 0x60607800,
    0xc0603018, 0x0c060200,
    0x78181818, 0x18187800,
    0x10386cc6, 0x00000000,
    0x00000000, 0x000000ff,
    0x30301800, 0x00000000,
    0x0000780c, 0x7ccc7600,
    0xe0607c66, 0x6666bc00,
    0x000078cc, 0xc0cc7800,
    0x1c0c0c7c, 0xcccc7600,
    0x000078cc, 0xfcc07800,
    0x386c60f0, 0x6060f000,
    0x000076cc, 0xcc7c0cf8,
    0xe0606c76, 0x6666e600,
    0x30007030, 0x30307800,
    0x18007818, 0x1818d870,
    0xe060666c, 0x786ce600,
    0x70303030, 0x30307800,
    0x0000ecfe, 0xd6c6c600,
    0x0000f8cc, 0xcccccc00,
    0x000078cc, 0xcccc7800,
    0x0000dc66, 0x667c60f0,
    0x000076cc, 0xcc7c0c1e,
    0x0000d86c, 0x6c60f000,
    0x00007cc0, 0x780cf800,
    0x10307c30, 0x30341800,
    0x0000cccc, 0xcccc7600,
    0x0000cccc, 0xcc783000,
    0x0000c6c6, 0xd6fe6c00,
    0x0000c66c, 0x386cc600,
    0x0000cccc, 0xcc7c0cf8,
    0x0000fc98, 0x3064fc00,
    0x1c3030e0, 0x30301c00,
    0x18181800, 0x18181800,
    0xe030301c, 0x3030e000,
    0x76dc0000, 0x00000000,
    0x10386cc6, 0xc6c6fe00
};

const int textmode_width = 80;
const int textmode_height = 25;

layout (std140, binding = 0) uniform textmode {
    uvec4 character_vectors[125]; // XXX: hardcoded 80x25
};

void main()
{
    uint col = uint(floor(gl_FragCoord.x)) / 8;
    uint x = uint(floor(gl_FragCoord.x)) % 8;
    uint row = uint(floor(gl_FragCoord.y)) / 8;
    uint y = 7 - uint(floor(gl_FragCoord.y)) % 8;

    if(col >= textmode_width || row >= textmode_height)
        discard;

    row = textmode_height - row - 1;

    uint character = character_vectors[(col + row*textmode_width) / 16][(col/4)%4] >> ((col%4)*8);
    character = character & 0x7f;

    if((font[2*character + (y/4)] & (1 << (((3 - y%4) * 8)+(7-x)))) == 0)
        discard;

    color = vec4(1,1,1,1);
}
