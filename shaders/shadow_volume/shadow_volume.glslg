#version 330

layout(triangles_adjacency) in;
layout(triangle_strip, max_vertices = 15) out;

uniform mat4 projection_matrix;
uniform mat4 shadow_matrix;
uniform mat4 view_matrix;

uniform vec4 light_position;

in struct camera_space_ {
    vec4 position;
} camera_space[];

void main()
{
    vec4 light = view_matrix * light_position;

    vec4 a = camera_space[0].position;
    vec4 b = camera_space[2].position;
    vec4 c = camera_space[4].position;

    vec3 normal = normalize(cross((b-a).xyz, (c-a).xyz));
    vec4 plane = vec4(normal.xyz, -dot(normal, a.xyz));
    float dist = dot(light, plane);

    if(dist > 0) {
        // front face
        gl_Position = projection_matrix * a;
        EmitVertex();

        gl_Position = projection_matrix * b;
        EmitVertex();

        gl_Position = projection_matrix * c;
        EmitVertex();

        EndPrimitive();
    } else {
        // back face
        gl_Position = shadow_matrix * (light.w*a - light);
        EmitVertex();

        gl_Position = shadow_matrix * (light.w*b - light);
        EmitVertex();

        gl_Position = shadow_matrix * (light.w*c - light);
        EmitVertex();

        EndPrimitive();
    }

    for(int i = 0; i < 3; ++i) {
        vec4 vert = camera_space[2*i].position;
        vec4 next = camera_space[(2*i+2)%6].position;
        vec4 adj = camera_space[2*i+1].position;

        vec3 normal_adj = normalize(cross((adj-vert).xyz, (next-vert).xyz));
        vec4 plane_adj = vec4(normal_adj.xyz, -dot(normal_adj, vert.xyz));
        float dist_adj = dot(light, plane_adj);

        if(dist > 0 && dist_adj < 0) {
            // Silhouette edge detected
            gl_Position = projection_matrix * next;
            EmitVertex();

            gl_Position = projection_matrix * vert;
            EmitVertex();

            gl_Position = shadow_matrix * (light.w*next - light);
            EmitVertex();

            gl_Position = shadow_matrix * (light.w*vert - light);
            EmitVertex();

            EndPrimitive();
        }
    }
}
